
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "VIBER"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('VIBER')
Warning: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
Warning: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("choose_clusters")
> ### * choose_clusters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: choose_clusters
> ### Title: Filter clusters heuristic
> ### Aliases: choose_clusters
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> choose_clusters(fit_mvbmm_example)
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Warning in max(x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
✓ Reduced to k = 2 (from 10) selecting VIBER cluster(s) with π > 0.02, and Binomial p > 0.05 in w > 1 dimension(s).
✓ 81 points are now not assigned (cluster = NA) because their cluster has been removed.
── [ VIBER ] mvbmm - Variational fit for Binomial mixtures n = 231 (w = 2 dimens
● Clusters: π = 69% [C2] and 31% [C1], with π > 0.
● Binomials: θ = <0.5, 0.49> [C2] and <0.25, 0.25> [C1].
ℹ Score(s): ELBO = -47073.329. Fit converged in 20 steps, ε = 1e-10.
> 
> 
> 
> cleanEx()
> nameEx("fit_mvbmm_example")
> ### * fit_mvbmm_example
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_mvbmm_example
> ### Title: Fit of the attached multivariate Binomial mixture
> ### Aliases: fit_mvbmm_example
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> print(fit_mvbmm_example)
── [ VIBER ] mvbmm - Variational fit for Binomial mixtures n = 231 (w = 2 dimens
● Clusters: π = 45% [C8], 28% [C10], 20% [C5], and 7% [C6], with π > 0.
● Binomials: θ = <0.5, 0.49> [C8], <0, 0.2> [C10], <0.25, 0.25> [C5], and
  <0.22, 0> [C6].
ℹ Score(s): ELBO = -47073.329. Fit converged in 20 steps, ε = 1e-10.
> 
> 
> 
> cleanEx()
> nameEx("get_clone_trees")
> ### * get_clone_trees
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_clone_trees
> ### Title: Return clone trees from the fit.
> ### Aliases: get_clone_trees
> 
> ### ** Examples
> 
> 
> 
> data(mvbmm_example)
> 
> # We create annotation data assigning dummy names
> # and picking 10 events to be drivers (randomly chosen)
> data_annotations = data.frame(
+  gene = paste0("G", 1:nrow(mvbmm_example$trials)),
+  driver = FALSE
+  )
> 
> data_annotations$driver[sample(1:nrow(data_annotations), 10)] = TRUE
> 
> # Compared to the main variational_fit, we use the same call but add data
> f = variational_fit(mvbmm_example$successes, mvbmm_example$trials, data = data_annotations)
 [ VIBER - variational fit ] 
ℹ Input n = 231, with k < 10. Dirichlet concentration α = 1e-06.
ℹ Beta (a_0, b_0) = (1, 1); q_i = prior. Optimise: ε = 1e-10 or 5000 steps, r = 10 starts.
starting worker pid=45208 on localhost:11073 at 10:47:00.532
starting worker pid=45210 on localhost:11073 at 10:47:00.537
starting worker pid=45209 on localhost:11073 at 10:47:00.538
starting worker pid=45207 on localhost:11073 at 10:47:00.537
starting worker pid=45211 on localhost:11073 at 10:47:00.541
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
Loading required package: easypar
Loading required package: easypar
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
loaded easypar and set parent environment
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
Loading required package: easypar
Loading required package: easypar
loaded easypar and set parent environment
loaded easypar and set parent environment
loaded easypar and set parent environment
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
Loading required package: easypar
loaded easypar and set parent environment

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag


Attaching package: ‘dplyr’

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

The following objects are masked from ‘package:stats’:

    filter, lag


Attaching package: ‘dplyr’

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘ggplot2’

The following object is masked from ‘package:crayon’:

    %+%


Attaching package: ‘ggplot2’


Attaching package: ‘ggplot2’

The following object is masked from ‘package:crayon’:

    %+%

The following object is masked from ‘package:crayon’:

    %+%


Attaching package: ‘dplyr’


Attaching package: ‘ggplot2’

The following object is masked from ‘package:crayon’:

    %+%

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘ggplot2’

The following object is masked from ‘package:crayon’:

    %+%

Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
Warning messages:
Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
Warning messages:
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 

✓ VIBER fit completed in 0.05 mins (status: converged)

── [ VIBER ] My VIBER model n = 231 (w = 2 dimensions). Fit with k = 10 clusters
● Clusters: π = 45% [C1], 28% [C5], 20% [C10], and 7% [C4], with π > 0.
● Binomials: θ = <0.5, 0.49> [C1], <0, 0.2> [C5], <0.25, 0.25> [C10], and
  <0.22, 0> [C4].
ℹ Score(s): ELBO = -47073.341. Fit converged in 22 steps, ε = 1e-10.
> print(f)
── [ VIBER ] My VIBER model n = 231 (w = 2 dimensions). Fit with k = 10 clusters
● Clusters: π = 45% [C1], 28% [C5], 20% [C10], and 7% [C4], with π > 0.
● Binomials: θ = <0.5, 0.49> [C1], <0, 0.2> [C5], <0.25, 0.25> [C10], and
  <0.22, 0> [C4].
ℹ Score(s): ELBO = -47073.341. Fit converged in 22 steps, ε = 1e-10.
> 
> trees = get_clone_trees(f)
Estimated clonal cluster C1 from VIBER fit.
Found 3 driver event(s) in VIBER fits.
 [ ctree ~ clone trees generator for VIBER_dataset ] 

# A tibble: 4 x 6
  cluster       S1       S2 nMuts is.clonal is.driver
  <chr>      <dbl>    <dbl> <int> <lgl>     <lgl>    
1 C1      0.498    0.493      103 TRUE      TRUE     
2 C4      0.217    0.000657    16 FALSE     FALSE    
3 C5      0.000156 0.203       65 FALSE     TRUE     
4 C10     0.251    0.254       47 FALSE     TRUE     

✓ Trees per region 2, 2
ℹ Total 4 tree structures - search is exahustive

── Ranking trees 
✓ 4  trees with non-zero score, storing 4
> 
> ctree:::print.ctree(trees[[1]])
 [ ctree - ctree rank 1/4 for VIBER_dataset ] 

# A tibble: 4 x 6
  cluster       S1       S2 nMuts is.clonal is.driver
  <chr>      <dbl>    <dbl> <int> <lgl>     <lgl>    
1 C1      0.498    0.493      103 TRUE      TRUE     
2 C4      0.217    0.000657    16 FALSE     FALSE    
3 C5      0.000156 0.203       65 FALSE     TRUE     
4 C10     0.251    0.254       47 FALSE     TRUE     

Tree shape (drivers annotated)  

  \-GL
   \-C1 :: G14, G43, G51, G68
    \-C10 :: G129, G167, G210, G215
     |-C4
     \-C5 :: G162, G187

Information transfer  

   GL ---> G14 
   GL ---> G43 
   GL ---> G51 
   GL ---> G68 
   G129 ---> G162 
   G129 ---> G187 
   G167 ---> G162 
   G167 ---> G187 
   G210 ---> G162 
   G210 ---> G187 
   G215 ---> G162 
   G215 ---> G187 
   G14 ---> G129 
   G14 ---> G167 
   G14 ---> G210 
   G14 ---> G215 
   G43 ---> G129 
   G43 ---> G167 
   G43 ---> G210 
   G43 ---> G215 
   G51 ---> G129 
   G51 ---> G167 
   G51 ---> G210 
   G51 ---> G215 
   G68 ---> G129 
   G68 ---> G167 
   G68 ---> G210 
   G68 ---> G215 

Tree score 0.25 
> ctree::plot.ctree(trees[[1]])
Warning: Duplicated aesthetics after name standardisation: na.rm
Warning: Removed 1 rows containing missing values (geom_point).
> 
> 
> 
> cleanEx()
> nameEx("mvbmm_example")
> ### * mvbmm_example
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mvbmm_example
> ### Title: Example data
> ### Aliases: mvbmm_example
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(mvbmm_example)
> head(mvbmm_example)
$successes
# A tibble: 231 x 2
      S1    S2
   <dbl> <dbl>
 1    44    39
 2    38    57
 3    45    54
 4    56    56
 5    54    56
 6    60    44
 7    53    46
 8    53    55
 9    56    53
10    53    60
# … with 221 more rows

$trials
# A tibble: 231 x 2
      S1    S2
   <dbl> <dbl>
 1    86    76
 2    79   106
 3    90   108
 4   111   105
 5   100   102
 6   107    90
 7   111   103
 8    94   104
 9   115    98
10   105   116
# … with 221 more rows

> 
> 
> 
> cleanEx()
> nameEx("plot.vb_bmm")
> ### * plot.vb_bmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.vb_bmm
> ### Title: Plot the clustering assignments.
> ### Aliases: plot.vb_bmm
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> plot(fit_mvbmm_example)
Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.
Using compatibility `.name_repair`.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated.
[[1]]

> 
> 
> 
> cleanEx()
> nameEx("plot_ELBO")
> ### * plot_ELBO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_ELBO
> ### Title: Plot the ELBO
> ### Aliases: plot_ELBO
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> plot_ELBO(fit_mvbmm_example)
> 
> 
> 
> cleanEx()
> nameEx("plot_latent_variables")
> ### * plot_latent_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_latent_variables
> ### Title: Plot the latent variables of the mixture.
> ### Aliases: plot_latent_variables
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> plot_latent_variables(fit_mvbmm_example)
> 
> 
> 
> cleanEx()
> nameEx("plot_mixing_proportions")
> ### * plot_mixing_proportions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_mixing_proportions
> ### Title: Plot the mixing proportions of the mixture.
> ### Aliases: plot_mixing_proportions
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> plot_mixing_proportions(fit_mvbmm_example)
> 
> 
> 
> cleanEx()
> nameEx("plot_peaks")
> ### * plot_peaks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_peaks
> ### Title: Plot the Binomial peaks of the mixture.
> ### Aliases: plot_peaks
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> plot_peaks(fit_mvbmm_example)
> 
> 
> 
> cleanEx()
> nameEx("print.vb_bmm")
> ### * print.vb_bmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.vb_bmm
> ### Title: Print to screen the object
> ### Aliases: print.vb_bmm
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> print(fit_mvbmm_example)
── [ VIBER ] mvbmm - Variational fit for Binomial mixtures n = 231 (w = 2 dimens
● Clusters: π = 45% [C8], 28% [C10], 20% [C5], and 7% [C6], with π > 0.
● Binomials: θ = <0.5, 0.49> [C8], <0, 0.2> [C10], <0.25, 0.25> [C5], and
  <0.22, 0> [C6].
ℹ Score(s): ELBO = -47073.329. Fit converged in 20 steps, ε = 1e-10.
> 
> 
> 
> cleanEx()
> nameEx("summary.vb_bmm")
> ### * summary.vb_bmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.vb_bmm
> ### Title: Print to screen the object
> ### Aliases: summary.vb_bmm
> 
> ### ** Examples
> 
> data(fit_mvbmm_example)
> print(fit_mvbmm_example)
── [ VIBER ] mvbmm - Variational fit for Binomial mixtures n = 231 (w = 2 dimens
● Clusters: π = 45% [C8], 28% [C10], 20% [C5], and 7% [C6], with π > 0.
● Binomials: θ = <0.5, 0.49> [C8], <0, 0.2> [C10], <0.25, 0.25> [C5], and
  <0.22, 0> [C6].
ℹ Score(s): ELBO = -47073.329. Fit converged in 20 steps, ε = 1e-10.
> 
> 
> 
> cleanEx()
> nameEx("variational_fit")
> ### * variational_fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: variational_fit
> ### Title: Variational fit for Binomial mixtures
> ### Aliases: variational_fit
> 
> ### ** Examples
> 
> data(mvbmm_example)
> f = variational_fit(mvbmm_example$successes, mvbmm_example$trials)
 [ VIBER - variational fit ] 
ℹ Input n = 231, with k < 10. Dirichlet concentration α = 1e-06.
ℹ Beta (a_0, b_0) = (1, 1); q_i = prior. Optimise: ε = 1e-10 or 5000 steps, r = 10 starts.
starting worker pid=45281 on localhost:11073 at 10:47:05.366
starting worker pid=45283 on localhost:11073 at 10:47:05.368
starting worker pid=45285 on localhost:11073 at 10:47:05.370
starting worker pid=45284 on localhost:11073 at 10:47:05.370
starting worker pid=45282 on localhost:11073 at 10:47:05.371
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading ctree, 'Clone trees in cancer'. Support : <https://caravagn.github.io/ctree/>
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
Loading required package: easypar
loaded easypar and set parent environment
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
Loading required package: easypar
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
Loading required package: easypar
Loading required package: easypar
✓ Loading VIBER, 'Variational inference for multivariate Binomial mixtures'. Support : <https://caravagn.github.io/VIBER/>
loaded easypar and set parent environment
Loading required package: easypar
loaded easypar and set parent environment
loaded easypar and set parent environment
loaded easypar and set parent environment

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag


Attaching package: ‘ggplot2’

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

The following object is masked from ‘package:crayon’:

    %+%


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag


Attaching package: ‘ggplot2’

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

The following object is masked from ‘package:crayon’:

    %+%


Attaching package: ‘ggplot2’

The following object is masked from ‘package:crayon’:

    %+%


Attaching package: ‘ggplot2’

The following object is masked from ‘package:crayon’:

    %+%


Attaching package: ‘ggplot2’

The following object is masked from ‘package:crayon’:

    %+%

Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 
Warning messages:
1: replacing previous import ‘cli::num_ansi_colors’ by ‘crayon::num_ansi_colors’ when loading ‘VIBER’ 
2: replacing previous import ‘crayon::%+%’ by ‘ggplot2::%+%’ when loading ‘VIBER’ 

✓ VIBER fit completed in 0.06 mins (status: converged)

── [ VIBER ] My VIBER model n = 231 (w = 2 dimensions). Fit with k = 10 clusters
● Clusters: π = 45% [C8], 28% [C5], 20% [C10], and 7% [C3], with π > 0.
● Binomials: θ = <0.5, 0.49> [C8], <0, 0.2> [C5], <0.25, 0.25> [C10], and
  <0.22, 0> [C3].
ℹ Score(s): ELBO = -47073.341. Fit converged in 24 steps, ε = 1e-10.
> print(f)
── [ VIBER ] My VIBER model n = 231 (w = 2 dimensions). Fit with k = 10 clusters
● Clusters: π = 45% [C8], 28% [C5], 20% [C10], and 7% [C3], with π > 0.
● Binomials: θ = <0.5, 0.49> [C8], <0, 0.2> [C5], <0.25, 0.25> [C10], and
  <0.22, 0> [C3].
ℹ Score(s): ELBO = -47073.341. Fit converged in 24 steps, ε = 1e-10.
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.561 0.137 10.238 0.008 0.013 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
